"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[498],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>u});var o=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(n),g=r,u=m["".concat(l,".").concat(g)]||m[g]||d[g]||a;return n?o.createElement(u,i(i({ref:t},c),{},{components:n})):o.createElement(u,i({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=g;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[m]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},10623:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var o=n(58168),r=(n(96540),n(15680));const a={},i="Detox Copilot",p={unversionedId:"api/copilot",id:"api/copilot",title:"Detox Copilot",description:"Detox Copilot is an AI-powered plugin that allows you to write Detox tests using natural language commands, powered by large language models (LLMs). It simplifies the process of writing end-to-end tests by translating human-readable instructions into Detox actions and assertions.",source:"@site/../docs/api/copilot.md",sourceDirName:"api",slug:"/api/copilot",permalink:"/Detox/docs/next/api/copilot",draft:!1,editUrl:"https://github.com/wix/Detox/edit/master/docs/../docs/api/copilot.md",tags:[],version:"current",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Logger",permalink:"/Detox/docs/next/api/logger"},next:{title:"Internals API",permalink:"/Detox/docs/next/api/internals"}},l={},s=[{value:"Overview",id:"overview",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>copilot.init(promptHandler)</code>",id:"copilotinitprompthandler",level:2},{value:"<code>copilot.perform(...steps)</code>",id:"copilotperformsteps",level:2},{value:"<code>PromptHandler</code> Interface",id:"prompthandler-interface",level:2}],c={toc:s},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(m,(0,o.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"detox-copilot"},"Detox Copilot"),(0,r.yg)("p",null,"Detox Copilot is an AI-powered plugin that allows you to write Detox tests using natural language commands, powered by large language models (LLMs). It simplifies the process of writing end-to-end tests by translating human-readable instructions into Detox actions and assertions."),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"Detox Copilot is based on a core library called ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/wix-incubator/detox-copilot"},"detox-copilot"),", which is designed for Detox but can be extended to work with other testing frameworks.")),(0,r.yg)("admonition",{title:"Work in Progress",type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"Detox Copilot is in active development, and APIs are subject to change in future releases.")),(0,r.yg)("h2",{id:"overview"},"Overview"),(0,r.yg)("p",null,"Detox Copilot exposes a simple API that integrates seamlessly with your Detox tests. It requires minimal setup and allows you to perform complex testing operations by simply describing them in natural language."),(0,r.yg)("p",null,"For a more detailed guide on integrating Detox Copilot in your tests, refer to the ",(0,r.yg)("a",{parentName:"p",href:"/Detox/docs/next/copilot/testing-with-copilot"},"Detox Copilot Guide"),"."),(0,r.yg)("h2",{id:"methods"},"Methods"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#copilotinitprompthandler"},(0,r.yg)("inlineCode",{parentName:"a"},"copilot.init()"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"#copilotperformsteps"},(0,r.yg)("inlineCode",{parentName:"a"},"copilot.perform()")))),(0,r.yg)("h2",{id:"copilotinitprompthandler"},(0,r.yg)("inlineCode",{parentName:"h2"},"copilot.init(promptHandler)")),(0,r.yg)("p",null,"Initializes Detox Copilot with the given prompt handler. Must be called before any other Copilot methods."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Parameters:")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"promptHandler")," (PromptHandler): An object implementing the ",(0,r.yg)("a",{parentName:"li",href:"#prompthandler-interface"},(0,r.yg)("inlineCode",{parentName:"a"},"PromptHandler"))," interface.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"const { copilot } = require('detox');\nconst OpenAIPromptHandler = require('./OpenAIPromptHandler');\n\nbeforeAll(() => {\n  const promptHandler = new OpenAIPromptHandler('YOUR_OPENAI_API_KEY');\n  copilot.init(promptHandler);\n});\n")),(0,r.yg)("h2",{id:"copilotperformsteps"},(0,r.yg)("inlineCode",{parentName:"h2"},"copilot.perform(...steps)")),(0,r.yg)("p",null,"Performs a testing operation or series of operations based on the given steps."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Parameters:")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"steps")," (string[]): One or more natural language instructions specifying the actions or assertions to perform.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Returns:")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"A promise that resolves when all steps have been executed.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Example:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"await copilot.perform(\n  'Start the application',\n  'Tap on the \"Login\" button',\n  'Enter \"user@example.com\" into the email field',\n  'Enter \"password123\" into the password field',\n  'Press the \"Submit\" button',\n  'The welcome message \"Hello, User!\" should be displayed'\n);\n")),(0,r.yg)("h2",{id:"prompthandler-interface"},(0,r.yg)("inlineCode",{parentName:"h2"},"PromptHandler")," Interface"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"PromptHandler")," interface defines how Detox Copilot communicates with the LLM service."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"interface PromptHandler {\n  /**\n   * Sends a prompt to the LLM service and returns the response.\n   * @param prompt The prompt to send.\n   * @param image Optional path to an image capturing the current UI state.\n   * @returns A promise resolving to the LLM's response.\n   */\n  runPrompt(prompt: string, image?: string): Promise<string>;\n\n  /**\n   * Indicates whether the LLM service supports snapshot images.\n   * @returns A boolean value.\n   */\n  isSnapshotImageSupported(): boolean;\n}\n")),(0,r.yg)("p",null,"You can refer to the ",(0,r.yg)("a",{parentName:"p",href:"/Detox/docs/next/copilot/testing-with-copilot"},"Detox Copilot Guide")," for an example of implementing a ",(0,r.yg)("inlineCode",{parentName:"p"},"PromptHandler")," for OpenAI's service."))}d.isMDXComponent=!0}}]);